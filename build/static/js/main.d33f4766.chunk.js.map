{"version":3,"sources":["js/constants.js","components/cell.js","components/board.js","components/controlbar.js","js/graph.js","App.js","serviceWorker.js","index.js"],"names":["states","free","block","visited","path","startNode","targetNode","rv","cv","defaultSpeed","defaultStartNode","defaultTargetNode","Cell","props","data-col","col","data-row","row","onClick","handle","onMouseMove","drawing","className","Object","keys","value","children","Board","state","lastVisited","handleBoardChange","handleDraw","isDrawing","setState","onMouseDown","onMouseUp","this","nodes","map","e","key","r","size","React","Component","ControlBar","useState","setSize","isOrthogonal","id","onChange","target","updateBoard","Number","Graph","adjucList","node","push","n1","n2","weight","every","elm","val","stack","length","pop","forEach","queue","distance","shift","stepMethod","n","parent","POSITIVE_INFINITY","reverse","App","setBoard","initialState","setStartEnd","getNeighbours","c","nei","cVector","rVector","i","action","prevState","newNodes","nodeState","showPath","timer","speed","idx","msg","setTimeout","Math","floor","solve","graph","reset","setupNodes","sr","sc","tr","tc","shortestPath","ShortestPath","Array","from","fill","addNode","addEdges","window","location","reload","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d33f4766.chunk.js","sourcesContent":["export const states = {\n    free: 0,\n    block: 1,\n    visited: 2,\n    path: 3,\n    startNode: 4,\n    targetNode: 5\n}\n\nexport const rv = [0, 1, 0, -1];\nexport const cv = [-1, 0, 1, 0];\nexport const rvDiag = [0 ,  1, 1, 1, 0, -1, -1 , -1] ;\nexport const cvDiag = [-1, -1, 0, 1, 1,  1,  0 , -1];\nexport const defaultSpeed = 200;\nexport const defaultStartNode = [10, 3];\nexport const defaultTargetNode = [10, 17];\nexport const defaultBoardSize = 35;\n\n\n","import React from 'react';\nimport {states} from \"../js/constants\";\n\nconst Cell = (props) => <div\n    data-col={props.col}\n    data-row={props.row}\n    onClick={\n        () => {\n            props.handle(props.col, props.row)\n        }\n    }\n    onMouseMove={\n        () => {\n            if (props.drawing) props.handle(props.col, props.row)\n        }\n    }\n    className={\" cell \" + Object.keys(states)[props.value]}>{props.children}</div>\nexport default Cell\n","import React from \"react\"\nimport Cell from \"./cell\";\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drawing: false,\n        };\n        this.lastVisited = [-1, -1];\n    }\n\n    handle = (col, row) => {\n        if (this.state.drawing\n            && this.lastVisited[0] === col\n            && this.lastVisited[1] === row) return;\n        this.lastVisited = [col, row];\n        this.props.handleBoardChange(col, row, \"select\")\n    }\n    handleDraw = (isDrawing = true) => {\n        this.setState({drawing: isDrawing})\n    }\n\n    render() {\n        return (\n            <div onMouseDown={() => this.handleDraw(true)}\n                 onMouseUp={() => {\n                     this.handleDraw(false);\n                     this.lastVisited = [-1, -1];\n                 }}\n                 className={\"board\"}>\n                {this.props.nodes.map((e, row) => <div key={row} className={\"row\"}>\n                    {\n                        e.map((r, col) => <Cell\n                            key={col + (this.props.size * row)}\n                            row={row}\n                            col={col}\n                            value={this.props.nodes[col][row]}\n                            handle={this.handle}\n                            drawing={this.state.drawing}\n                        />)\n                    }\n                </div>)\n                }\n            </div>)\n    }\n}\n\nexport default Board\n","import React, {useState} from \"react\";\nimport {defaultBoardSize} from \"../js/constants\"\n\nconst ControlBar = (props) => {\n    let [size, setSize] = useState(defaultBoardSize);\n    let [isOrthogonal, setIsOrthogonal] = useState(true);\n    return <div><label>Board Size </label>\n        <input id=\"size\"\n               value={size}\n               onChange={(e) => {\n                 setSize(e.target.value)\n               }}/>\n        {/*\n         // TODO : ADD diagonal paths\n         <label> Go Diagonal </label>\n        <input type=\"checkbox\"\n               id=\"isOrthogonal\"\n               checked={isOrthogonal}\n               onChange={(e) => {\n                   setIsOrthogonal(e.target.checked)\n\n               }}/>  */}\n        <button onClick={() => props.updateBoard(Number(size), isOrthogonal)}> Update Settings</button>\n    </div>;\n}\n\nexport default ControlBar;\n","class Graph {\n    constructor() {\n        this.nodes = []\n        this.adjucList = {}\n    }\n    reset() {\n        this.nodes = []\n        this.adjucList = {}\n    }\n\n    addNode(node) {\n        this.nodes.push(node)\n        this.adjucList[node] = [];\n    }\n\n    addEdges(n1, n2, weight) {\n        if ((this.adjucList[n1]).every(elm => elm.val !== n2)) this.adjucList[n1].push({val: n2, weight});\n        if ((this.adjucList[n2]).every(elm => elm.val !== n1)) this.adjucList[n2].push({val: n1, weight});\n    }\n\n    DFS(startNode, targetNode) {\n        const stack = [];\n        const visited = {};\n        stack.push(startNode);\n        while (stack.length) {\n            let node = stack.pop();\n            if (visited[node]) continue;\n            if (node === targetNode) {\n                return true\n            }\n\n            this.adjucList[node].forEach((elm) => {\n                if (!visited[elm.val]) stack.push(elm.val)\n            });\n            visited[node] = true;\n\n        }\n        return false\n    }\n\n    BFS(startNode, targetNode) {\n        const queue = [];\n        const visited = {};\n        queue.push(startNode);\n        const distance = {[startNode]: 0};\n        while (queue.length) {\n            debugger\n            let node = queue.shift();\n            if (visited[node]) continue;\n            if (node === targetNode) return distance[node];\n            this.adjucList[node].forEach((elm) => {\n                if (!visited[elm.val]) {\n                    queue.push(elm.val);\n                }\n                if (!distance[elm.val] || distance[elm.val] > distance[node] + elm.weight) distance[elm.val] = distance[node] + elm.weight\n            });\n            visited[node] = true;\n        }\n        return null\n    }\n\n    ShortestPath(startNode, targetNode , stepMethod = null) {\n        const queue = [];\n        const visited = {};\n        queue.push(startNode);\n\n        const distance = {}\n        for (let n in this.adjucList) {\n            distance[n] = {parent: null, distance: Number.POSITIVE_INFINITY}\n        }\n\n        distance[startNode].distance = 0;\n        while (queue.length) {\n\n            let node = queue.shift();\n            if (visited[node]) continue;\n            // if (node === targetNode) return distance[node];\n            this.adjucList[node].forEach((elm) => {\n                if (!visited[elm.val]) {\n                    queue.push(elm.val);\n                }\n                if (distance[elm.val].distance > distance[node].distance + elm.weight) distance[elm.val] = {\n                    parent: node,\n                    distance: distance[node].distance + elm.weight\n                }\n            });\n            visited[node] = true;\n            if(stepMethod) stepMethod(visited);\n        }\n\n        if (distance[targetNode].distance === Number.POSITIVE_INFINITY) return Number.POSITIVE_INFINITY;\n\n        const path = [];\n        let node = targetNode\n        while (node) {\n            path.push(node);\n            node = distance[node].parent\n        }\n        return [path.reverse(), distance[targetNode].distance]\n    }\n}\n\n\nexport default Graph;\n\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Board from \"./components/board\";\nimport Controlbar from \"./components/controlbar\";\nimport {\n    states,\n    cv,\n    rv,\n    cvDiag,\n    rvDiag,\n    defaultSpeed,\n    defaultStartNode,\n    defaultTargetNode\n} from \"./js/constants\";\nimport Graph from \"./js/graph\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.initialState = (size = this.props.size) => ({\n            nodes: Array.from(Array(size), () => Array(size).fill(0)),\n            size,\n            speed: defaultSpeed,\n            startNode: defaultStartNode,\n            targetNode: defaultTargetNode,\n            msg: \"Draw walls in the grid then hit the button to find the shortest path \",\n            isOrthogonal: true\n        });\n        this.state = {\n            ...this.initialState()\n        };\n\n        this.graph = new Graph()\n    }\n\n    componentDidMount() {\n        this.setBoard(this.state.size)\n    }\n\n\n    setBoard = (size, isOrthogonal = true) => {\n\n        this.setState(() => ({\n            ...this.initialState(Number(size)),\n            isOrthogonal\n        }));\n        this.setStartEnd();\n    };\n\n    setStartEnd() {\n        // TODO : improve this logic\n        this.state.targetNode[1] = this.state.size - 3;\n        const [sr, sc] = this.state.startNode;\n        const [tr, tc] = this.state.targetNode;\n\n        this.setState((prevState) => {\n            const newNodes = [...prevState.nodes];\n            newNodes[sc][sr] = states.startNode;\n            newNodes[tc][tr] = states.targetNode;\n            return {nodes: newNodes}\n        })\n    }\n\n    setupNodes() {\n        let idx = 0;\n        for (let row = 0; row < this.state.size; row++) {\n            for (let col = 0; col < this.state.size; col++) {\n                this.graph.addNode(idx);\n                idx++;\n            }\n        }\n        idx = 0;\n        for (let row = 0; row < this.state.size; row++) {\n            for (let col = 0; col < this.state.size; col++) {\n                this.getNeighbours(col, row).forEach(n => this.graph.addEdges(idx, n, 1));\n                idx++;\n            }\n        }\n    }\n\n    getNeighbours = (c, r) => {\n        const nei = [];\n        //TODO : ADD support for diagonal paths\n        // const [cVector, rVector] = this.state.isOrthogonal ? [cv, rv] : [cvDiag, rvDiag];\n        const [cVector, rVector] = [cv, rv];\n\n        if (this.state.nodes[c][r] === states.block) return [];\n\n        for (let i = 0; i < rVector.length; i++) {\n            let col = c + cVector[i];\n            let row = r + rVector[i];\n            if (col >= 0 && row >= 0\n                && col < this.state.size\n                && row < this.state.size) {\n                if (this.state.nodes[col][row] === states[\"free\"]) nei.push(row * this.state.size + col)\n            }\n        }\n        return nei;\n    };\n\n    handleBoardChange = (row, col, action = \"select\") => {\n        this.setState((prevState) => {\n            const newNodes = [...prevState.nodes];\n            const nodeState = newNodes[row][col];\n\n            if (action === \"select\") {\n                if (nodeState === states.block) {\n                    newNodes[row][col] = states.free\n                }\n                if (nodeState === states.free) {\n                    newNodes[row][col] = states.block\n                }\n            } else {\n                if (nodeState !== states.startNode\n                    && nodeState !== states.targetNode) newNodes[row][col] = states[action]\n            }\n            return {nodes: newNodes}\n        })\n    };\n\n    showPath = (path) => {\n        const timer = this.state.speed;\n        let idx = 0;\n        if (!path || path === Number.POSITIVE_INFINITY) {\n            this.setState({msg: \" there is no path between nodes \"});\n            return\n        } else {\n            this.setState({msg: `there are ${path[1]} steps to get to the target node`});\n        }\n        while (idx < path[0].length) {\n            ((idx) => {\n                setTimeout(() => {\n                    let row = path[0][idx] % this.state.size;\n                    let col = Math.floor(path[0][idx] / this.state.size);\n                    this.handleBoardChange(row, col, \"path\");\n                }, timer * idx)\n            })(idx);\n            idx++;\n        }\n    };\n\n\n    solve = () => {\n        this.graph.reset();\n        this.setupNodes();\n        const [sr, sc] = this.state.startNode;\n        const [tr, tc] = this.state.targetNode;\n        const shortestPath = this.graph.ShortestPath(\n            sr * this.state.size + sc,\n            tr * this.state.size + tc,\n            () => {\n\n            });\n        this.showPath(shortestPath)\n\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Shortest Path on Graph</h1>\n                <h3>By: Hadi Yaghinloo</h3>\n                <Controlbar updateBoard={this.setBoard}/>\n                <p>{this.state.msg}</p>\n                <button id={\"solve\"} onClick={this.solve}> Find The Shortest Path</button>\n\n                <button onClick={\n                    () => {\n                        window.location.reload()\n                    }\n                }>Reload\n                </button>\n                <Board handleBoardChange={this.handleBoardChange} {...this.state}/>\n\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {defaultBoardSize} from \"./js/constants\";\n\nReactDOM.render(<App size={defaultBoardSize} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}